/*
 * MiniProjet_MasterMind
 * TDC - Groupe 1
 * Martin Rouanet
 * 20 Novembre 2024
 */
package cpo_miniprojet;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JButton;

/**
 *
 * @author marti
 */
public class CPO_Mini_Projet extends javax.swing.JFrame {
        private PlateauDeJeu plateau;
        private int nbToursMax;
        private Combinaison combinaisonSecrete;
        private int tailleCombinaison;
        private ArrayList<Character> couleursDisponibles;
    /**
     * Creates new form CPO_Mini_Projet
     */
    public CPO_Mini_Projet() {
        this.nbToursMax = 10;
        this.tailleCombinaison = 4;
        this.couleursDisponibles = new ArrayList<>();
        this.couleursDisponibles.add('R');
        this.couleursDisponibles.add('B');
        this.couleursDisponibles.add('G');
        this.couleursDisponibles.add('Y');
        
        this.plateau = new PlateauDeJeu(combinaisonSecrete, nbToursMax);
        this.couleursDisponibles = new ArrayList<>(couleursDisponibles);
        
        initComponents();
        int nbLignes = 12;
        int nbColonnes = 4;
        PlateauDeJeu.setLayout(new GridLayout(nbLignes, nbColonnes));
        for (int i=0; i < nbLignes; i++) {
            for (int j=0; j < nbColonnes; j++ ) {
                CelluleGraphique bouton_cellule = new CelluleGraphique(plateau.get(i).get(j), 36, 36);
                PlateauDeJeu.add(bouton_cellule); // ajout au Jpanel PlateauDeJeu
 }
}
    }

public void CPO_Mini_Projet(int tailleCombinaison, int nbToursMax, List<Character> couleursDisponibles) {
        this.couleursDisponibles = new ArrayList<>(couleursDisponibles);
        
        // Générer une combinaison secrète aléatoire
        Pion[] combinaisonsSecretes = new Pion[tailleCombinaison];
        for (int i = 0; i < tailleCombinaison; i++) {
            char couleurAleatoire = couleursDisponibles.get((int) (Math.random() * couleursDisponibles.size()));
            combinaisonsSecretes[i] = new Pion(couleurAleatoire);
        }
        Combinaison combinaisonSecrete = new Combinaison(combinaisonsSecretes);
        
        // Créer une instance de PlateauDeJeu avec la combinaison secrète et le nombre de tours
        this.plateau = new PlateauDeJeu(combinaisonSecrete, nbToursMax);
    }

public class CelluleGraphique extends JButton {
    int largeur; // largeur en pixel de la cellule
    int hauteur; // hauteur en pixel de la cellule
    private Character couleur;
    
    // constructeur (appelé depuis FenetrePrincipale)
    public CelluleGraphique(int l,int h) {
    this.largeur = l;
    this.hauteur = h;
    }
    
    // Methode gérant le dessin de la cellule
    @Override
    protected void paintComponent(Graphics g) {
    super.paintComponent(g);
    }
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PlateauDeJeu = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        PlateauDeJeu.setBackground(new java.awt.Color(153, 153, 255));

        javax.swing.GroupLayout PlateauDeJeuLayout = new javax.swing.GroupLayout(PlateauDeJeu);
        PlateauDeJeu.setLayout(PlateauDeJeuLayout);
        PlateauDeJeuLayout.setHorizontalGroup(
            PlateauDeJeuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        PlateauDeJeuLayout.setVerticalGroup(
            PlateauDeJeuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        getContentPane().add(PlateauDeJeu, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 20, 400, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CPO_Mini_Projet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CPO_Mini_Projet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CPO_Mini_Projet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CPO_Mini_Projet.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CPO_Mini_Projet().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PlateauDeJeu;
    // End of variables declaration//GEN-END:variables
}
